
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { QuoteData, FormData } from '../components/QuoteGenerator';
import { formatNumber } from './formatters';

export const generatePDF = async (element: HTMLElement, data: QuoteData, formData: FormData): Promise<void> => {
  try {
    // A4 dimensions in points
    const PAGE_WIDTH = 595.28;
    const PAGE_HEIGHT = 841.89;
    const MARGIN = 50;
    
    const CONTENT_WIDTH = PAGE_WIDTH - (2 * MARGIN);
    const CONTENT_HEIGHT = PAGE_HEIGHT - (2 * MARGIN);

    const calculateImagePlacement = (image: HTMLCanvasElement) => {
      const scaleX = CONTENT_WIDTH / image.width;
      const scaleY = CONTENT_HEIGHT / image.height;
      const scale = Math.min(scaleX, scaleY, 1); // Never scale up, only down

      const scaledWidth = image.width * scale;
      const scaledHeight = image.height * scale;

      const x = MARGIN + (CONTENT_WIDTH - scaledWidth) / 2;
      const y = MARGIN + (CONTENT_HEIGHT - scaledHeight) / 2;

      return { x, y, width: scaledWidth, height: scaledHeight };
    };

    // Create PDF header content
    const pdfHeader = document.createElement('div');
    pdfHeader.style.cssText = `
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 40px;
      padding: 20px;
      border-bottom: 2px solid #FF5A71;
      background: white;
      font-family: Arial, sans-serif;
    `;
    
    pdfHeader.innerHTML = `
      <div>
        <div style="font-size: 32px; color: #FF5A71; font-weight: bold;">Ontop</div>
        <div style="font-size: 14px; color: #666; margin-top: 5px;">Global Employment Solutions</div>
      </div>
      <div style="text-align: right; background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #FF5A71;">
        <div style="margin-bottom: 8px; font-size: 14px;"><strong>Quote Sender:</strong> ${formData.aeName}</div>
        <div style="margin-bottom: 8px; font-size: 14px;"><strong>Client Name:</strong> ${formData.clientName}</div>
        <div style="font-size: 14px;"><strong>Valid Until:</strong> ${new Date(Date.now() + 30*24*60*60*1000).toLocaleDateString()}</div>
      </div>
    `;

    // Create PDF footer content
    const pdfFooter = document.createElement('div');
    pdfFooter.style.cssText = `
      margin-top: 40px;
      padding: 20px;
      border-top: 1px solid #e5e7eb;
      font-size: 11px;
      color: #666;
      line-height: 1.4;
      background: white;
      font-family: Arial, sans-serif;
    `;
    
    const currentDate = new Date().toLocaleDateString();
    pdfFooter.innerHTML = `
      <p><strong>Important Notes:</strong></p>
      <ul style="margin: 10px 0; padding-left: 20px;">
        <li style="margin-bottom: 5px;">Currency conversions based on rates on ${currentDate}, may vary—contracts always in local currency.</li>
        <li style="margin-bottom: 5px;">Setup Cost = one month's salary (Security Deposit) + Ontop fee; secures Ontop against potential defaults.</li>
        <li style="margin-bottom: 5px;">Dismissal Deposit = one-twelfth of salary, provisioned for future termination costs.</li>
      </ul>
      <div style="text-align: center; margin-top: 20px; color: #FF5A71; font-weight: bold;">
        Generated by Ontop Quote Generator • ${currentDate}
      </div>
    `;

    const pdf = new jsPDF({
      unit: 'pt',
      format: 'a4',
      orientation: 'portrait'
    });

    // Define all sections to capture
    const sections = [
      {
        element: pdfHeader,
        margin: { top: 30, bottom: 20 }
      },
      {
        selector: '.amount-you-pay',
        newPage: true,
        margin: { top: 40, bottom: 40 }
      },
      {
        selector: '.amount-employee-gets',
        newPage: true,
        margin: { top: 40, bottom: 40 }
      },
      {
        selector: '.setup-summary',
        newPage: true,
        margin: { top: 40, bottom: 40 }
      },
      {
        element: pdfFooter,
        margin: { top: 20, bottom: 30 }
      }
    ];

    // Add temporary elements to DOM for capturing
    document.body.appendChild(pdfHeader);
    document.body.appendChild(pdfFooter);

    // Process each section
    for (let i = 0; i < sections.length; i++) {
      const { selector, element: customElement, newPage, margin } = sections[i];
      
      let sectionElement;
      if (customElement) {
        sectionElement = customElement;
      } else if (selector) {
        sectionElement = element.querySelector(selector);
        if (!sectionElement) continue;
      } else {
        continue;
      }

      if (newPage && i > 0) {
        pdf.addPage();
      }

      console.log(`Capturing section ${i + 1}...`);
      const image = await html2canvas(sectionElement as HTMLElement, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });

      const { x, y, width, height } = calculateImagePlacement(image);
      
      // Apply section-specific margins
      const yPosition = y + (margin?.top || 0);
      pdf.addImage(image.toDataURL('image/png'), 'PNG', x, yPosition, width, height);
    }

    // Clean up temporary elements
    document.body.removeChild(pdfHeader);
    document.body.removeChild(pdfFooter);

    // Save the PDF
    const fileName = `Ontop-Quote-${formData.clientName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`;
    console.log('Saving PDF:', fileName);
    pdf.save(fileName);

  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};
