
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { QuoteData, FormData } from '../components/QuoteGenerator';

export const generatePDF = async (element: HTMLElement, data: QuoteData, formData: FormData): Promise<void> => {
  try {
    // Create a temporary container for PDF content
    const pdfContainer = document.createElement('div');
    pdfContainer.style.width = '210mm'; // A4 width
    pdfContainer.style.minHeight = '297mm'; // A4 height
    pdfContainer.style.padding = '20mm';
    pdfContainer.style.backgroundColor = 'white';
    pdfContainer.style.fontFamily = 'Arial, sans-serif';
    pdfContainer.style.position = 'absolute';
    pdfContainer.style.top = '-9999px';
    pdfContainer.style.left = '-9999px';

    // Create PDF header with Ontop branding
    const header = document.createElement('div');
    header.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 30px; border-bottom: 2px solid #FF5A71; padding-bottom: 20px;">
        <div>
          <h1 style="color: #FF5A71; font-size: 32px; font-weight: bold; margin: 0;">Ontop</h1>
          <p style="color: #666; font-size: 14px; margin: 5px 0 0 0;">Global Employment Solutions</p>
        </div>
        <div style="text-align: right; background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #FF5A71;">
          <div style="margin-bottom: 10px;">
            <label style="font-size: 12px; color: #666; display: block;">Quote Sender:</label>
            <div style="border-bottom: 1px solid #ccc; min-width: 150px; padding: 2px 0;">${formData.aeName}</div>
          </div>
          <div style="margin-bottom: 10px;">
            <label style="font-size: 12px; color: #666; display: block;">Client Name:</label>
            <div style="border-bottom: 1px solid #ccc; min-width: 150px; padding: 2px 0;">${formData.clientName}</div>
          </div>
          <div>
            <label style="font-size: 12px; color: #666; display: block;">Valid Until:</label>
            <div style="border-bottom: 1px solid #ccc; min-width: 150px; padding: 2px 0;">${new Date(Date.now() + 30*24*60*60*1000).toLocaleDateString()}</div>
          </div>
        </div>
      </div>
    `;

    // Create PDF content
    const content = document.createElement('div');
    content.innerHTML = `
      <h2 style="color: #333; font-size: 24px; margin-bottom: 20px;">Employment Quote Summary</h2>
      
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
        ${createTableHTML('Amount You Pay', data.payFields, '#FF5A71', true)}
        ${createTableHTML('Amount Employee Gets', data.employeeFields, '#10B981', false)}
      </div>
      
      ${data.setupSummary.length > 0 ? `
      <div style="margin-bottom: 30px;">
        ${createTableHTML('Setup Summary', data.setupSummary, '#3B82F6', true)}
      </div>
      ` : ''}
    `;

    // Create footer
    const footer = document.createElement('div');
    const currentDate = new Date().toLocaleDateString();
    footer.innerHTML = `
      <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 11px; color: #666; line-height: 1.4;">
        <p><strong>Important Notes:</strong></p>
        <ul style="margin: 10px 0; padding-left: 20px;">
          <li>Currency conversions based on rates on ${currentDate}, may vary—contracts always in local currency.</li>
          <li>Setup Cost = one month's salary (Security Deposit) + Ontop fee; secures Ontop against potential defaults.</li>
          <li>Dismissal Deposit = one-twelfth of salary, provisioned for future termination costs.</li>
        </ul>
        <div style="text-align: center; margin-top: 20px; color: #FF5A71; font-weight: bold;">
          Generated by Ontop Quote Generator • ${currentDate}
        </div>
      </div>
    `;

    // Assemble PDF container
    pdfContainer.appendChild(header);
    pdfContainer.appendChild(content);
    pdfContainer.appendChild(footer);
    document.body.appendChild(pdfContainer);

    // Generate PDF
    const canvas = await html2canvas(pdfContainer, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });

    document.body.removeChild(pdfContainer);

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const imgWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    const fileName = `Ontop-Quote-${formData.clientName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);

  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};

const createTableHTML = (title: string, fields: any[], color: string, showTotal: boolean = true): string => {
  if (fields.length === 0) return '';

  const total = fields.reduce((sum, field) => sum + field.amount, 0);
  
  const formatNumber = (amount: number): string => amount.toFixed(2);
  
  return `
    <div style="border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); margin-bottom: 20px;">
      <div style="background: ${color}; color: white; padding: 15px;">
        <h3 style="margin: 0; font-size: 18px; font-weight: 600;">${title}</h3>
      </div>
      <div style="background: white;">
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background: #f9fafb;">
              <th style="padding: 12px 15px; text-align: left; font-size: 12px; color: #374151; font-weight: 600; border-bottom: 1px solid #e5e7eb;">Description</th>
              <th style="padding: 12px 15px; text-align: right; font-size: 12px; color: #374151; font-weight: 600; border-bottom: 1px solid #e5e7eb;">Amount</th>
            </tr>
          </thead>
          <tbody>
            ${fields.map(field => `
              <tr>
                <td style="padding: 10px 15px; font-size: 14px; color: #111827; border-bottom: 1px solid #f3f4f6;">${field.label}</td>
                <td style="padding: 10px 15px; font-size: 14px; color: #111827; text-align: right; font-weight: 500; border-bottom: 1px solid #f3f4f6;">
                  ${formatNumber(field.amount)} ${field.currency}
                </td>
              </tr>
            `).join('')}
            ${showTotal ? `
            <tr style="background: #f9fafb; font-weight: 600;">
              <td style="padding: 12px 15px; font-size: 14px; color: #111827;">
                ${title === 'Amount You Pay' ? 'Total You Pay' : 
                  title === 'Setup Summary' ? 'Total Setup Fee' : 'Total'}
              </td>
              <td style="padding: 12px 15px; font-size: 14px; color: #111827; text-align: right;">
                ${formatNumber(total)} ${fields[0]?.currency || 'USD'}
              </td>
            </tr>
            ` : ''}
          </tbody>
        </table>
      </div>
    </div>
  `;
};
