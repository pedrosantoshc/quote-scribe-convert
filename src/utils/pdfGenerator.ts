
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { QuoteData, FormData } from '../components/QuoteGenerator';
import { formatNumber } from './formatters';

export const generatePDF = async (element: HTMLElement, data: QuoteData, formData: FormData): Promise<void> => {
  try {
    // Get all major sections
    const headerSection = element.querySelector('.header') as HTMLElement;
    const payTable = element.querySelector('.amount-you-pay') as HTMLElement;
    const employeeTable = element.querySelector('.amount-employee-gets') as HTMLElement;
    const setupTable = element.querySelector('.setup-summary') as HTMLElement;
    const footer = element.querySelector('.footer') as HTMLElement;

    // Create PDF header content
    const pdfHeader = document.createElement('div');
    pdfHeader.style.cssText = `
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 40px;
      padding: 20px;
      border-bottom: 2px solid #FF5A71;
      background: white;
      font-family: Arial, sans-serif;
    `;
    
    pdfHeader.innerHTML = `
      <div>
        <div style="font-size: 32px; color: #FF5A71; font-weight: bold;">Ontop</div>
        <div style="font-size: 14px; color: #666; margin-top: 5px;">Global Employment Solutions</div>
      </div>
      <div style="text-align: right; background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #FF5A71;">
        <div style="margin-bottom: 8px; font-size: 14px;"><strong>Quote Sender:</strong> ${formData.aeName}</div>
        <div style="margin-bottom: 8px; font-size: 14px;"><strong>Client Name:</strong> ${formData.clientName}</div>
        <div style="font-size: 14px;"><strong>Valid Until:</strong> ${new Date(Date.now() + 30*24*60*60*1000).toLocaleDateString()}</div>
      </div>
    `;

    // Create PDF footer content
    const pdfFooter = document.createElement('div');
    pdfFooter.style.cssText = `
      margin-top: 40px;
      padding: 20px;
      border-top: 1px solid #e5e7eb;
      font-size: 11px;
      color: #666;
      line-height: 1.4;
      background: white;
      font-family: Arial, sans-serif;
    `;
    
    const currentDate = new Date().toLocaleDateString();
    pdfFooter.innerHTML = `
      <p><strong>Important Notes:</strong></p>
      <ul style="margin: 10px 0; padding-left: 20px;">
        <li style="margin-bottom: 5px;">Currency conversions based on rates on ${currentDate}, may vary—contracts always in local currency.</li>
        <li style="margin-bottom: 5px;">Setup Cost = one month's salary (Security Deposit) + Ontop fee; secures Ontop against potential defaults.</li>
        <li style="margin-bottom: 5px;">Dismissal Deposit = one-twelfth of salary, provisioned for future termination costs.</li>
      </ul>
      <div style="text-align: center; margin-top: 20px; color: #FF5A71; font-weight: bold;">
        Generated by Ontop Quote Generator • ${currentDate}
      </div>
    `;

    // Add temporary elements to DOM for capturing
    document.body.appendChild(pdfHeader);
    document.body.appendChild(pdfFooter);

    // Convert each section to image with high quality
    const canvasOptions = {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    };

    console.log('Capturing header...');
    const headerImage = await html2canvas(pdfHeader, canvasOptions);
    
    console.log('Capturing pay table...');
    const payTableImage = payTable ? await html2canvas(payTable, canvasOptions) : null;
    
    console.log('Capturing employee table...');
    const employeeTableImage = employeeTable ? await html2canvas(employeeTable, canvasOptions) : null;
    
    console.log('Capturing setup table...');
    const setupTableImage = setupTable ? await html2canvas(setupTable, canvasOptions) : null;
    
    console.log('Capturing footer...');
    const footerImage = await html2canvas(pdfFooter, canvasOptions);

    // Clean up temporary elements
    document.body.removeChild(pdfHeader);
    document.body.removeChild(pdfFooter);

    // Create PDF with proper dimensions (A4)
    const pdf = new jsPDF({
      unit: 'px',
      format: 'a4',
      orientation: 'portrait'
    });

    // A4 dimensions in pixels at 72 DPI
    const pageWidth = 595;
    const pageHeight = 842;
    const margin = 40;
    const usableWidth = pageWidth - (2 * margin);

    // Add images with proper scaling and page breaks
    let currentY = margin;

    // Header
    console.log('Adding header to PDF...');
    const headerScale = usableWidth / headerImage.width;
    const headerHeight = headerImage.height * headerScale;
    pdf.addImage(headerImage.toDataURL('image/png'), 'PNG', margin, currentY, usableWidth, headerHeight);
    currentY += headerHeight + 20;

    // Pay table
    if (payTableImage) {
      console.log('Adding pay table to PDF...');
      const payTableScale = usableWidth / payTableImage.width;
      const payTableHeight = payTableImage.height * payTableScale;
      
      // Check if we need a new page
      if (currentY + payTableHeight > pageHeight - margin - 100) {
        pdf.addPage();
        currentY = margin;
      }
      
      pdf.addImage(payTableImage.toDataURL('image/png'), 'PNG', margin, currentY, usableWidth, payTableHeight);
      currentY += payTableHeight + 20;
    }

    // Employee table (always on new page for better readability)
    if (employeeTableImage) {
      console.log('Adding employee table to PDF...');
      pdf.addPage();
      currentY = margin;
      
      const employeeTableScale = usableWidth / employeeTableImage.width;
      const employeeTableHeight = employeeTableImage.height * employeeTableScale;
      
      pdf.addImage(employeeTableImage.toDataURL('image/png'), 'PNG', margin, currentY, usableWidth, employeeTableHeight);
      currentY += employeeTableHeight + 20;
    }

    // Setup table (new page if it exists and has content)
    if (setupTableImage && data.setupSummary.length > 0) {
      console.log('Adding setup table to PDF...');
      pdf.addPage();
      currentY = margin;
      
      const setupTableScale = usableWidth / setupTableImage.width;
      const setupTableHeight = setupTableImage.height * setupTableScale;
      
      pdf.addImage(setupTableImage.toDataURL('image/png'), 'PNG', margin, currentY, usableWidth, setupTableHeight);
      currentY += setupTableHeight + 20;
    }

    // Footer
    console.log('Adding footer to PDF...');
    const footerScale = usableWidth / footerImage.width;
    const footerHeight = footerImage.height * footerScale;
    
    // Check if we need a new page for footer
    if (currentY + footerHeight > pageHeight - margin) {
      pdf.addPage();
      currentY = margin;
    }
    
    pdf.addImage(footerImage.toDataURL('image/png'), 'PNG', margin, currentY, usableWidth, footerHeight);

    // Save the PDF
    const fileName = `Ontop-Quote-${formData.clientName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`;
    console.log('Saving PDF:', fileName);
    pdf.save(fileName);

  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};
